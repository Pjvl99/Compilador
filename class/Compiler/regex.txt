Num
(-|ε)·([0-9])+·(.·([0-9])*)?
ID
([a-zA-Z])·([a-zA-Z]|[0-9])*
comp_op
>|<|(>·=)|(<·=)
Hex_Digit
0·x·[A-Fa-f0-9]·([A-Fa-f0-9])*
Bool_literal
(t·r·u·e)|(f·a·l·s·e)
FOR
(f·o·r)
Comment
(/·/)
char_Literal
'·( [A-Za-z0-9] )·'
arit_op
+|-|*|/|%
left_paren_op
$
right_paren_op
#
backslash
'·/·'
single_quote
'·/·'·'
literal_tab
'·/·t·'
newline
'·/·n·'
cond_op
(a·n·d)|(o·r)
assign_op
=|(+·=)|(-·=)
break
b·r·e·a·k
continue
c·o·n·t·i·n·u·e
class
c·l·a·s·s
IF
i·f
return
r·e·t·u·r·n
else
e·l·s·e
void
v·o·i·d
callout
c·a·l·l·o·u·t
eq_op
(=·=)|(!·=)
left_brack
{
right_brack
}
out
o·u·t
out_key
<·<
squareb_left
&
squareb_right
^
comma
,
type
(b·o·o·l)|(i·n·t)|(f·l·o·a·t)|(c·h·a·r)|(d·o·u·b·l·e)
END

Num
(-|ε)·([0-9])+·(.·([0-9])*)?
ID
([a-zA-Z])·([a-zA-Z]|[0-9])*
comp_op
>|<|(>·=)|(<·=)
Hex_Digit
0·x·[A-Fa-f0-9]·([A-Fa-f0-9])*
Bool_literal
(t·r·u·e)|(f·a·l·s·e)
FOR
(f·o·r)
Comment
(/·/)
char_Literal
'·([A-Za-z0-9])·'
arit_op
+|-|*|/|%
left_paren_op
$
right_paren_op
#
backslash
'·/·'
single_quote
'·/·'·'
literal_tab
'·/·t·'
newline
'·/·n·'
cond_op
(a·n·d)|(o·r)
assign_op
=|(+·=)|(-·=)
break
b·r·e·a·k
continue
c·o·n·t·i·n·u·e
class
c·l·a·s·s
type_int
i·n·t
type_bool
b·o·o·l·e·a·n
type_float
f·l·o·a·t
IF
i·f
return
r·e·t·u·r·n
else
e·l·s·e
void
v·o·i·d
callout
c·a·l·l·o·u·t
eq_op
(=·=)|(!·=)
left_brack
{
right_brack
}
out
o·u·t
out_key
<·<
squareb_left
&
squareb_right
^