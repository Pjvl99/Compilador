<program> -> <class> program '{' <method_decl>* <field_decl>* '}'

<field_decl> -> <type> {<id> | <id> '[' <int_literal> ']' }+, ;

<method_decl> -> {<type> | <void>} <id> ( [{<type> <id>}+,] ) <block>

<block> -> '{' <statement>* <var_decl>* '}'

<var_decl> -> <type> <id>+, ;

<statement> -> <block>
| <location> <assign_op> <expr> ;
| <method_call> ;
| <if> ( <expr> ) <block> [<else> <block>]
| <for> <id> = <expr> , <expr> <block>
| <return> [<expr>] ;
| <break> ;
| <continue> ;

<method_call> -> <id> ( [<expr>+,] )
| <callout> ( <string_literal> [, <callout_arg>+,] )

<location> -> <id>
| <location2>

<location2> -> <id> '[' <expr> ']'

<expr> -> <location>
| <method_call>
| <literal>
| <expr> <bin_op> <expr>
| - <expr>
| ! <expr>
| ( <expr> )

<bin_op> -> <arith_op> | <rel_op> | <eq_op> | <cond_op>

<arith_op> -> + | - | * | / | %

<rel_op> -> '<' | '>' | <= | >=

<eq_op> -> == | !=

<assign_op> -> = | -= | +=

<cond_op> -> <and> | <or>

<literal> -> <bool_literal>
| <char_literal>
| <int_literal>

<bool_literal> -> <true> | <false>

<int_literal> -> <num> | <hex_digit>

<callout_arg> -> <expr> | <string_literal>
